# import ArtistSubscriptionPayload from "./generated/prisma/prisma.graphql"

type AuthorizationPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  thumb: File
}

type Artist {
  id: ID!
  name: String!
  thumb: File
}

input ArtistConnectInput {
  id: ID!
}

type Album {
  id: ID!
  name: String!
  artists: [Artist!]
  cover: File
}

input AlbumConnectionInput {
  id: ID!
}

type Track {
  id: ID!
  name: String!
  album: Album!
  artists: [Artist!]!
}

type File {
  uri: String!
  name: String
}

"""Describes information about Musik's api."""
type About {
  """API's canonical name."""
  name: String!

  """Current api's version."""
  version: String!

  """API author's name."""
  author: String!

  """Short description about."""
  info: String!
}


"""Allow to do file uploads"""
scalar Upload

type Query {
  """Provides general info about Muzik's api."""
  about: About!

  # Artist Query
  # ---------------------------------------------------------------------------
  """Provides all available artists."""
  artists: [Artist!]!

  """Provides an artist by its id."""
  artist(id: String!): Artist

  # ---------------------------------------------------------------------------



  # Album Query
  # ---------------------------------------------------------------------------

  """Provides all available albums."""
  albums: [Album!]!

  """Provides an album by its id."""
  album(id: String!): Album

  # ---------------------------------------------------------------------------




  # Track Query
  # ---------------------------------------------------------------------------

  """Provides all available tracks."""
  tracks: [Track!]!

  """Provides a track by its id."""
  track(id: String!): Track
  
  # ---------------------------------------------------------------------------
}

type Mutation {

  # Account Mutation
  # ---------------------------------------------------------------------------

  """Creates a new Account"""
  signup(name: String!, email: String!, password: String!): AuthorizationPayload!

  """Creates a new session with an already registered account"""
  signin(email: String!, password: String!): AuthorizationPayload!

  """Updates some User"""
  updateUser(id: ID!, name: String, email: String, oldPassword:String, newPassword: String, thumbnail: Upload): User!

  """Removes a User"""
  deleteUser(id: ID!): User!

  # ---------------------------------------------------------------------------



  # Artist Mutation
  # ---------------------------------------------------------------------------

  """Creates a new Artist."""
  createArtist(name: String!): Artist!

  """Updates an existing Artist."""
  updateArtist(id: ID!, name: String, thumb: Upload): Artist!

  """Removes an Artist"""
  deleteArtist(id: ID!): Artist

  # ---------------------------------------------------------------------------




  # Album Mutation
  # ---------------------------------------------------------------------------

  """Creates a new Album."""
  createAlbum(name: String!, artists: [ArtistConnectInput!]!, cover: Upload): Album!

  """Updates an existing Album."""
  updateAlbum(id: ID!, name: String, artists: [ArtistConnectInput!], cover: Upload): Album!

  """Removes an Album"""
  deleteAlbum(id: ID!): Album

  # ---------------------------------------------------------------------------



  # Track Mutation
  # ---------------------------------------------------------------------------

  """Creates a new Track."""
  createTrack(name: String, album: AlbumConnectionInput!, artists: [ArtistConnectInput!]!): Track!

  """Updates an existing Track."""
  updateTrack(id: ID!, name: String, album: AlbumConnectionInput, artists: [ArtistConnectInput!]): Track!

  """Removes an Track."""
  deleteTrack(id: ID!): Track
}

type Subscription {
  """Subscribes for created Artist"""
  createArtist: ArtistSubscriptionPayload

  """Subscribes for updated Artist"""
  updateArtist: ArtistSubscriptionPayload

  """Subscribes for deleted Artist"""
  deleteArtist: ArtistSubscriptionPayload
}
